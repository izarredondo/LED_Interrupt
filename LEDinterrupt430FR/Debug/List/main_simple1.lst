###############################################################################
#
# IAR C/C++ Compiler V6.10.2.50871/W32 for MSP430         25/Oct/2016  13:35:09
# Copyright 1996-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Documents and Settings\Daniel\My
#        Documents\IAR_Projects\LEDinterrupt430FR\main_simple1.c
#    Command line  =  
#        "C:\Documents and Settings\Daniel\My
#        Documents\IAR_Projects\LEDinterrupt430FR\main_simple1.c" -lcN
#        "C:\Documents and Settings\Daniel\My
#        Documents\IAR_Projects\LEDinterrupt430FR\Debug\List\" -o "C:\Documents
#        and Settings\Daniel\My
#        Documents\IAR_Projects\LEDinterrupt430FR\Debug\Obj\" --debug
#        -D__MSP430FR6989__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 7.0\430\lib\dlib\dl430xlsfn.h" --core=430X
#        --data_model=small -Oh --multiplier=32 --multiplier_location=4C0
#        --hw_workaround=CPU40 --hw_workaround=CPU39 --segment __data16=DATA16
#        --segment __data20=DATA20 --code_model=large
#    List file     =  
#        C:\Documents and Settings\Daniel\My
#        Documents\IAR_Projects\LEDinterrupt430FR\Debug\List\main_simple1.lst
#    Object file   =  
#        C:\Documents and Settings\Daniel\My
#        Documents\IAR_Projects\LEDinterrupt430FR\Debug\Obj\main_simple1.r43
#
###############################################################################

C:\Documents and Settings\Daniel\My Documents\IAR_Projects\LEDinterrupt430FR\main_simple1.c
      1          #include "msp430.h"
      2          // LED TOggle Using Interrupts
      3          // Author: D. Loveless
      4          // Date of Last Update: 10/18/16
      5          // Developed for MSP430FR6989
      6          //
      7          // This program is used to introduce interrupts and ISRs, specifically using TIMER and PORT interrupts. 
      8          // The RED LED is toggled at 0.5 sec intervals (1 sec blink rate), and accepts 4 button presses from P1.1, speeding
      9          // up the blink rate by 2x each time, resetting on the last press (1 Hz, 2 Hz, 4 Hz, 8 Hz, 16 Hz, repeat). Each button
     10          // press toggles the GREEN LED.
     11          
     12          int toggleCycles = 750;                                 // Constatnt used to set # of counts before entering timer ISR
     13          int toggleTimes = 4;                                    // Constant used to hold # of button presses used to decrement timer
     14          
     15          void configureClocks(void)
     16          {
     17            CSCTL0 = CSKEY;                                       // Write clock system password (0xA500)
     18            CSCTL1 |= DCORSEL + DCOFSEL2;                         // Set necessary 1 bits for DCO to 16 MHz
     19            CSCTL1 &= ~(DCOFSEL1+DCOFSEL0);                       // Set necessary 0 bits for DCO to 16 MHz
     20            CSCTL1 = DCORSEL + DCOFSEL_4;                         // Alternate method
     21            CSCTL2 |= SELM__DCOCLK + SELA__VLOCLK;                // Set MCLK to be 011 (DCO) and ACLK to be 001 (VLOCLK)
     22            CSCTL2 &= SELM__DCOCLK + SELA__VLOCLK;
     23            //CSCTL2 = SELM__DCOCLK + SELA__VLOCLK; 
     24            //CSCTL3 = DIVM__1 + DIVA__8;                          // Divide ACLK by 8 (DIVA = 0011), MCLK by 1 (DIVM = 0000)
     25            CSCTL3 |= DIVA1 + DIVA0; 
     26            CSCTL3 &= DIVM2 + DIVM1 + DIVM0 + + DIVA2; 
     27          }
     28          
     29          void configurePorts(void)
     30          {
     31            PMMCTL0 = PMMPW;			         	// Open PMM Module
     32            PM5CTL0 &= ~LOCKLPM5;			                // Clear locked IO Pins
     33            P1DIR |= BIT0;                                        // Set P1.0 (Red LED) to output
     34            P9DIR |= BIT7;                                        // Configure P9.7 (Green LED) to be Output
     35            P1DIR &= ~BIT1; 				        // Set P1.1 (Left push button) to input
     36            P1DIR &= ~BIT2; 				        // Set P1.2 (Right push button) to input
     37            P1OUT |= BIT0;                                        // Initialize Red LED to be ON
     38            P9OUT &= ~BIT7;                                        // Initialize Green LED to be OFF
     39            P1REN |= BIT1 + BIT2;                                 // Enable a pull-up/down resistor on P1.1
     40            P1OUT |= BIT1 + BIT2;                                 // Set to be pull-up
     41            P1IE  = BIT1;                                         // Enable the interrupt from P1.1 (disable all other Port 1 pin interrupts)
     42            P1IES |= BIT1;                                        // Set the interrupt to trigger on a hi-low transition
     43            P1IFG &= ~BIT1;                                       // Clear the interrupt flag
     44          }
     45          void main( void )
     46          {
     47            WDTCTL = WDTPW + WDTHOLD;                             // Stop watchdog timer to prevent time out reset
     48            configureClocks();                                    // go to configure Clocks
     49            configurePorts();                                     // go to configure Ports
     50            __low_power_mode_3();                                 // Go into low power mode 3 and enable global interrupts (see intrinsics.h)
     51            //_BIS_SR(LPM3_bits + GIE); 	                        // Go into low power mode 3 and enable global interrupts (this method works, but is depreciated; use __bis_SR_register instead)
     52          }
     53          
     54          // Port1 Interrupt Service Routine
     55          #pragma vector=PORT1_VECTOR
     56            __interrupt void Port_1 (void)
     57           {
     58             //debounce
     59            __delay_cycles(512);                               // Wait for 32ms (512000 cycles at 16MHz)
     60            if((P1IN & BIT1) != BIT1)                             // Check that P1.1 is still depressed (i.e. if true edge)
     61            {
     62            P1OUT ^= BIT0;                                        // Toggle red LED
     63            P9OUT ^= BIT7;
     64            }
     65            P1IFG &= ~BIT1;                                       // Clear interrupt flag
     66          }

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      8   Port_1
      4   configureClocks
      4   configurePorts
      4   main
        4   -> configureClocks
        4   -> configurePorts


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for toggleCycles>
       2  ?<Initializer for toggleTimes>
       2  ??Port_1??INTVEC 74
      34  Port_1
       2  _A_CSCTL0_L
       2  _A_CSCTL1_L
       2  _A_CSCTL2_L
       2  _A_CSCTL3_L
       2  _A_PADIR_L
       2  _A_PAIES_L
       2  _A_PAIE_L
       2  _A_PAIFG_L
       2  _A_PAIN_L
       2  _A_PAOUT_L
       2  _A_PAREN_L
       2  _A_PEDIR_L
       2  _A_PEOUT_L
       2  _A_PM5CTL0_L
       2  _A_PMMCTL0_L
       2  _A_WDTCTL_L
      50  configureClocks
      64  configurePorts
      20  main
       2  toggleCycles
       2  toggleTimes

 
 134 bytes in segment CODE
  32 bytes in segment DATA16_AN
   4 bytes in segment DATA16_I
   4 bytes in segment DATA16_ID
   2 bytes in segment INTVEC
  34 bytes in segment ISR_CODE
 
 168 bytes of CODE  memory
   4 bytes of CONST memory (+  2 bytes shared)
   4 bytes of DATA  memory (+ 32 bytes shared)

Errors: none
Warnings: none
